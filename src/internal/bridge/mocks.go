// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/bridge/interface.go
//
// Generated by this command:
//
//	mockgen.exe -destination=../internal/bridge/mocks.go -package=bridge -source=../internal/bridge/interface.go
//
// Package bridge is a generated GoMock package.
package bridge

import (
	template "projects_template/internal/entity/template"
	transaction "projects_template/internal/transaction"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTemplate is a mock of Template interface.
type MockTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateMockRecorder
}

// MockTemplateMockRecorder is the mock recorder for MockTemplate.
type MockTemplateMockRecorder struct {
	mock *MockTemplate
}

// NewMockTemplate creates a new mock instance.
func NewMockTemplate(ctrl *gomock.Controller) *MockTemplate {
	mock := &MockTemplate{ctrl: ctrl}
	mock.recorder = &MockTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplate) EXPECT() *MockTemplateMockRecorder {
	return m.recorder
}

// AwesomePublicMethod mocks base method.
func (m *MockTemplate) AwesomePublicMethod(ts transaction.Session) (template.TemplateObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwesomePublicMethod", ts)
	ret0, _ := ret[0].(template.TemplateObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AwesomePublicMethod indicates an expected call of AwesomePublicMethod.
func (mr *MockTemplateMockRecorder) AwesomePublicMethod(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwesomePublicMethod", reflect.TypeOf((*MockTemplate)(nil).AwesomePublicMethod), ts)
}
