// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/repository/interface.go
//
// Generated by this command:
//
//	mockgen.exe -destination=../internal/repository/mocks.go -package=repository -source=../internal/repository/interface.go
//
// Package repository is a generated GoMock package.
package repository

import (
	template "projects_template/internal/entity/template"
	transaction "projects_template/internal/transaction"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// SaveLog mocks base method.
func (m *MockLogger) SaveLog(ts transaction.Session, logText string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLog", ts, logText)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLog indicates an expected call of SaveLog.
func (mr *MockLoggerMockRecorder) SaveLog(ts, logText any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLog", reflect.TypeOf((*MockLogger)(nil).SaveLog), ts, logText)
}

// MockTemplate is a mock of Template interface.
type MockTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateMockRecorder
}

// MockTemplateMockRecorder is the mock recorder for MockTemplate.
type MockTemplateMockRecorder struct {
	mock *MockTemplate
}

// NewMockTemplate creates a new mock instance.
func NewMockTemplate(ctrl *gomock.Controller) *MockTemplate {
	mock := &MockTemplate{ctrl: ctrl}
	mock.recorder = &MockTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplate) EXPECT() *MockTemplateMockRecorder {
	return m.recorder
}

// TemplateMethod mocks base method.
func (m *MockTemplate) TemplateMethod(ts transaction.Session) (template.TemplateObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateMethod", ts)
	ret0, _ := ret[0].(template.TemplateObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateMethod indicates an expected call of TemplateMethod.
func (mr *MockTemplateMockRecorder) TemplateMethod(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateMethod", reflect.TypeOf((*MockTemplate)(nil).TemplateMethod), ts)
}
